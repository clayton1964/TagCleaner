# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'plugins/post_tagging_actions/options_post_tagging_actions.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets


class Ui_PostTaggingActions(object):
    def setupUi(self, PostTaggingActions):
        PostTaggingActions.setObjectName("PostTaggingActions")
        PostTaggingActions.resize(638, 450)
        PostTaggingActions.setMinimumSize(QtCore.QSize(100, 0))
        self.verticalLayout = QtWidgets.QVBoxLayout(PostTaggingActions)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scrollArea = QtWidgets.QScrollArea(PostTaggingActions)
        self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, -70, 606, 502))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.vboxlayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.vboxlayout.setObjectName("vboxlayout")
        self.action_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.action_widget.setObjectName("action_widget")
        self._2 = QtWidgets.QVBoxLayout(self.action_widget)
        self._2.setObjectName("_2")
        self.widget_2 = QtWidgets.QWidget(self.action_widget)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.widget_2)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.add_file_path = QtWidgets.QPushButton(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.add_file_path.sizePolicy().hasHeightForWidth())
        self.add_file_path.setSizePolicy(sizePolicy)
        self.add_file_path.setCheckable(False)
        self.add_file_path.setObjectName("add_file_path")
        self.horizontalLayout_3.addWidget(self.add_file_path)
        self._2.addWidget(self.widget_2)
        self.action = QtWidgets.QLineEdit(self.action_widget)
        self.action.setObjectName("action")
        self._2.addWidget(self.action)
        self.wait = QtWidgets.QCheckBox(self.action_widget)
        self.wait.setObjectName("wait")
        self._2.addWidget(self.wait)
        self.refresh = QtWidgets.QCheckBox(self.action_widget)
        self.refresh.setObjectName("refresh")
        self._2.addWidget(self.refresh)
        self.widget_3 = QtWidgets.QWidget(self.action_widget)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.albums = QtWidgets.QRadioButton(self.widget_3)
        self.albums.setObjectName("albums")
        self.horizontalLayout_6.addWidget(self.albums)
        self.tracks = QtWidgets.QRadioButton(self.widget_3)
        self.tracks.setObjectName("tracks")
        self.horizontalLayout_6.addWidget(self.tracks)
        self._2.addWidget(self.widget_3)
        self.vboxlayout.addWidget(self.action_widget)
        self.table_commands = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.table_commands.setObjectName("table_commands")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.table_commands)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.widget = QtWidgets.QWidget(self.table_commands)
        self.widget.setObjectName("widget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.add_action = QtWidgets.QPushButton(self.widget)
        self.add_action.setObjectName("add_action")
        self.horizontalLayout_5.addWidget(self.add_action)
        self.remove_action = QtWidgets.QPushButton(self.widget)
        self.remove_action.setObjectName("remove_action")
        self.horizontalLayout_5.addWidget(self.remove_action)
        self.horizontalLayout_2.addWidget(self.widget)
        self.widget1 = QtWidgets.QWidget(self.table_commands)
        self.widget1.setObjectName("widget1")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.up = QtWidgets.QToolButton(self.widget1)
        self.up.setText("")
        self.up.setArrowType(QtCore.Qt.UpArrow)
        self.up.setObjectName("up")
        self.horizontalLayout_4.addWidget(self.up)
        self.down = QtWidgets.QToolButton(self.widget1)
        self.down.setText("")
        self.down.setArrowType(QtCore.Qt.DownArrow)
        self.down.setObjectName("down")
        self.horizontalLayout_4.addWidget(self.down)
        self.horizontalLayout_2.addWidget(self.widget1, 0, QtCore.Qt.AlignRight)
        self.vboxlayout.addWidget(self.table_commands)
        self.table = QtWidgets.QTableWidget(self.scrollAreaWidgetContents)
        self.table.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table.setObjectName("table")
        self.table.setColumnCount(4)
        self.table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(3, item)
        self.table.horizontalHeader().setDefaultSectionSize(150)
        self.vboxlayout.addWidget(self.table)
        self.line = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.vboxlayout.addWidget(self.line)
        self.frame = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.cancel = QtWidgets.QCheckBox(self.frame)
        self.cancel.setObjectName("cancel")
        self.verticalLayout_2.addWidget(self.cancel)
        self.widget_4 = QtWidgets.QWidget(self.frame)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_4)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.max_workers = QtWidgets.QSpinBox(self.widget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.max_workers.sizePolicy().hasHeightForWidth())
        self.max_workers.setSizePolicy(sizePolicy)
        self.max_workers.setMinimum(1)
        self.max_workers.setMaximum(64)
        self.max_workers.setObjectName("max_workers")
        self.horizontalLayout.addWidget(self.max_workers)
        self.label_2 = QtWidgets.QLabel(self.widget_4)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.verticalLayout_2.addWidget(self.widget_4)
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setOpenExternalLinks(True)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.vboxlayout.addWidget(self.frame)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.vboxlayout.addItem(spacerItem)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)

        self.retranslateUi(PostTaggingActions)
        QtCore.QMetaObject.connectSlotsByName(PostTaggingActions)

    def retranslateUi(self, PostTaggingActions):
        _translate = QtCore.QCoreApplication.translate
        PostTaggingActions.setWindowTitle(_translate("PostTaggingActions", "Form"))
        self.label_3.setText(_translate("PostTaggingActions", "Insert action"))
        self.add_file_path.setToolTip(_translate("PostTaggingActions", "Add a file path to the command line."))
        self.add_file_path.setText(_translate("PostTaggingActions", "Add file"))
        self.wait.setToolTip(_translate("PostTaggingActions", "If checked, the next action runs immediately."))
        self.wait.setText(_translate("PostTaggingActions", " Wait for process to finish"))
        self.refresh.setToolTip(_translate("PostTaggingActions", "<html><head/><body><p>If checked, the album will &quot;refresh&quot; after this action finishes.</p></body></html>"))
        self.refresh.setText(_translate("PostTaggingActions", " Refresh tags after process finishes"))
        self.albums.setToolTip(_translate("PostTaggingActions", "Makes the action execute once for each album tagged."))
        self.albums.setText(_translate("PostTaggingActions", "Execute for albums"))
        self.tracks.setToolTip(_translate("PostTaggingActions", "Makes the action run once for each track tagged."))
        self.tracks.setText(_translate("PostTaggingActions", "Execute for tracks"))
        self.add_action.setToolTip(_translate("PostTaggingActions", "Add the action at the bottom of the queue."))
        self.add_action.setText(_translate("PostTaggingActions", "Add action"))
        self.remove_action.setToolTip(_translate("PostTaggingActions", "Remove the selected action."))
        self.remove_action.setText(_translate("PostTaggingActions", "Remove action"))
        self.table.setToolTip(_translate("PostTaggingActions", "Actions at the top of the list run first. Use the buttons on the right to reorder the selected action."))
        item = self.table.horizontalHeaderItem(0)
        item.setText(_translate("PostTaggingActions", "Action"))
        item = self.table.horizontalHeaderItem(1)
        item.setText(_translate("PostTaggingActions", "   Wait for exit   "))
        item = self.table.horizontalHeaderItem(2)
        item.setText(_translate("PostTaggingActions", "   Execute for tracks   "))
        item = self.table.horizontalHeaderItem(3)
        item.setText(_translate("PostTaggingActions", "   Refresh tags   "))
        self.cancel.setToolTip(_translate("PostTaggingActions", "<html><head/><body><p>If <span style=\" font-weight:700;\">not </span>checked, when Picard is closed, it will wait for the actions to finish in the background.</p></body></html>"))
        self.cancel.setText(_translate("PostTaggingActions", "Cancel actions in the queue when Picard is closed"))
        self.label_2.setToolTip(_translate("PostTaggingActions", "Sets the number of background threads executing the actions"))
        self.label_2.setText(_translate("PostTaggingActions", "   Maximum number of worker threads (Requires Picard restart)"))
        self.label.setText(_translate("PostTaggingActions", "<html><head/><body><p>Hover over each item to know more, or take a peek at the user guide <a href=\"https://github.com/metabrainz/picard-plugins/tree/2.0/plugins/post_tagging_actions/docs/guide.md\"><span style=\" text-decoration: underline; color:#3584e4;\">here.</span></a></p></body></html>"))
